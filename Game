import socket
import threading

def handle_client(conn, addr):
    print(f"Connected by {addr}")
    while True:
        data = conn.recv(1024)
        if not data:
            break
        # Broadcast data to all clients
        for client in clients:
            if client != conn:
                client.sendall(data)
    conn.close()

def server():
    host = '127.0.0.1'  # Localhost
    port = 65432        # Non-privileged port
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((host, port))
    s.listen()
    print(f"Server started on {host}:{port}")
    
    while True:
        conn, addr = s.accept()
        thread = threading.Thread(target=handle_client, args=(conn, addr))
        thread.start()
        clients.append(conn)

clients = []
server_thread = threading.Thread(target=server)
server_thread.start()
import pygame
import socket
import threading

def receive_data(sock):
    while True:
        try:
            data = sock.recv(1024).decode()
            # Handle data (game state updates, etc.)
        except:
            print("An error occurred!")
            sock.close()
            break

def game_client():
    host = '127.0.0.1'
    port = 65432
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))
    
    pygame.init()
    screen = pygame.display.set_mode((640, 480))
    clock = pygame.time.Clock()
    
    recv_thread = threading.Thread(target=receive_data, args=(sock,))
    recv_thread.start()
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            # Send inputs to the server
            if event.type == pygame.KEYDOWN:
                sock.sendall(f"Key pressed: {event.key}".encode())
        
        screen.fill((0, 0, 0))  # Clear screen
        pygame.display.flip()
        clock.tick(60)
    
    pygame.quit()
    sock.close()

game_client()

  
